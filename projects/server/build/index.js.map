{
  "version": 3,
  "sources": ["../src/index.ts", "../src/config.ts"],
  "sourcesContent": ["import http from 'http';\nimport {\n\treadConfig,\n\tConfigSpec\n} from './config';\n\ntype HTTPConfig = {\n\t\"httpPort\": number,\n\t\"httpHost\": string\n}\n\nconst configSpec: ConfigSpec<HTTPConfig> = {\n\t\"httpPort\": {\n\t\tparseFn: parseInt,\n\t\tenv: \"XRAY_HTTP_PORT\",\n\t\tdefaultValue: 3001,\n\t},\n\t\"httpHost\": {\n\t\tdefaultValue: \"localhost\"\n\t}\n};\n\nconst {\thttpPort, httpHost } = readConfig<HTTPConfig>(configSpec);\n\n\nconst server = http.createServer((req, res) => {\n\tres.writeHead(200, { 'Content-Type': 'text/plain' });\n\tres.end('okay');\n});\n\nserver.listen(httpPort, httpHost, () => {\n\tconsole.log(\"listening \", httpHost, httpPort);\n});\n", "type ConfigParamSpec = {\n\tparseFn?: Function,\n\tenv?: string,\n\tdefaultValue?: unknown,\n}\n\nexport type ConfigSpec <T> = {\n\t[index in keyof T]: ConfigParamSpec\n}\n\ntype ReadConfigParamResult<T>= {\n\tname: keyof T,\n\tvalue: T[keyof T],\n}\n\ntype ReadConfigResult<T> = {\n\t[index in keyof T]: T[index]\n}\n\nfunction nonNull(x: any): boolean{\n\tif(x === undefined){\n\t\treturn false;\n\t}\n\n\tif(x === null){\n\t\treturn false;\n\t}\n\n\tif(isNaN(x)){\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nfunction parseParamValue(spec: ConfigParamSpec){\n\tconst defaultVal = spec.defaultValue;\n\tconst envVal = process.env[spec.env];\n\n\tif(nonNull(envVal)){\n\t\treturn spec.parseFn.call(undefined, envVal);\n\t}\n\n\treturn defaultVal;\n}\n\nfunction readConfigParam<T>(name: keyof T, spec: ConfigParamSpec): ReadConfigParamResult<T> {\n\tconst value = parseParamValue(spec);\n\n\treturn { name, value };\n}\n\nfunction entries<T>(obj: T): [keyof T, any][]{\n\treturn Object.entries(obj) as [keyof T, any];\n}\n\nexport function readConfig<T>(spec: ConfigSpec<T>): ReadConfigResult<T>{\n\treturn entries(spec)\n\t.map(([name, spec]) => readConfigParam<T>(name, spec))\n\t.reduce((acc, curr) => {\n\t\tacc[curr.name] = curr.value;\n\t\treturn acc;\n\t}, {} as ReadConfigResult<T>);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA,kBAAiB;;;ACmBjB,iBAAiB,GAAgB;AAChC,MAAG,MAAM,QAAU;AAClB,WAAO;AAAA;AAGR,MAAG,MAAM,MAAK;AACb,WAAO;AAAA;AAGR,MAAG,MAAM,IAAG;AACX,WAAO;AAAA;AAGR,SAAO;AAAA;AAGR,yBAAyB,MAAsB;AAC9C,QAAM,aAAa,KAAK;AACxB,QAAM,SAAS,QAAQ,IAAI,KAAK;AAEhC,MAAG,QAAQ,SAAQ;AAClB,WAAO,KAAK,QAAQ,KAAK,QAAW;AAAA;AAGrC,SAAO;AAAA;AAGR,yBAA4B,MAAe,MAAiD;AAC3F,QAAM,QAAQ,gBAAgB;AAE9B,SAAO,EAAE,MAAM;AAAA;AAGhB,iBAAoB,KAAyB;AAC5C,SAAO,OAAO,QAAQ;AAAA;AAGhB,oBAAuB,MAAyC;AACtE,SAAO,QAAQ,MACd,IAAI,CAAC,CAAC,MAAM,WAAU,gBAAmB,MAAM,QAC/C,OAAO,CAAC,KAAK,SAAS;AACtB,QAAI,KAAK,QAAQ,KAAK;AACtB,WAAO;AAAA,KACL;AAAA;;;ADnDJ,IAAM,aAAqC;AAAA,EAC1C,YAAY;AAAA,IACX,SAAS;AAAA,IACT,KAAK;AAAA,IACL,cAAc;AAAA;AAAA,EAEf,YAAY;AAAA,IACX,cAAc;AAAA;AAAA;AAIhB,IAAM,EAAE,UAAU,aAAa,WAAuB;AAGtD,IAAM,SAAS,oBAAK,aAAa,CAAC,KAAK,QAAQ;AAC9C,MAAI,UAAU,KAAK,EAAE,gBAAgB;AACrC,MAAI,IAAI;AAAA;AAGT,OAAO,OAAO,UAAU,UAAU,MAAM;AACvC,UAAQ,IAAI,cAAc,UAAU;AAAA;",
  "names": []
}
